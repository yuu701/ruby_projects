MVCモデルとは
機能ごとにプログラムの中身（処理）を分けて記述することで、プログラムを整理しやすくする考え方。
大勢の人が自分ルールでプログラムを作っていたら他の人が作ったプログラムの中身をみることが大変だから。

・モデル（Model）：表示や入力に関連しない処理を担当
・ビュー（View） ：表示や入力に関する処理を担当
・コントローラ（Controller）：ビューとモデルの橋渡し役を担当

モデル（Model）
ビジネスロジックを担当する部分。
ビジネスロジックとは、例えば申込フォームの内容をデータベースへ登録させる処理のこと。
処理した結果をデータベースへ反映させること。

主な処理
①　データの検索
②　データの変換
③　データの検証
④　データの関連

コントローラーから受け取った処理に基づいて、必要なデータをDBで参照する。
DBから取得したデータを一時的に預かり、コントローラーへ渡す。
モデルはDBそのものではなく、あくまでもコントローラーから受け取った処理からDBのデータを取得してくるだけの役割。

ビュー（View）
ユーザーが「お問い合わせフォーム」など、実際に入力や設定を行う画面を表示。
コントローラーから渡されたデータをHTMLなどで表示。
例えば、ログイン情報を探し出して、ユーザー名を画面に表示する。

主な処理
①　リクエスト（ユーザーの入力）を取得する。
②　リクエストをコントローラーへ渡す。
③　コントローラーから受け取ったデータをHTMLなどで出力する。

コントローラー（Controller）
ビューからのリクエストを受け取り、モデルへのメッセージに変換する。
レスポンスとして処理後の画面をビューに返す。
ユーザーの処理に基づいてモデルをコントロールする部分でもある。

主な処理
①　ビューからリクエストを受け取る。
②　受け取ったリクエストに基づいて該当するアクションを実行しモデルに伝える。
③　モデリングされたデータをモデルから受け取り、レスポンスとしてビューへ返す。


gemとは
Rubyのライブラリ（パッケージのこと）
ライブラリとはプログラムの部品で、便利な機能をひとまとめにしたもの。
ライブラリを利用することで、自分で１からコードを書くことなく機能を実装できるので、効率的に開発できる。

Rubyのgem
・Rails（Webフレームワーク）
・Devise（ログイン機能）
・Kaminari（ページネーション）
・unicorn(アプリケーションサーバ)
・Acrive　Admin（管理画面）

Gemfileとは
gemをインストールするための設計書。
Gemfilenに自分のアプリケーションに必要なgemを記述する。

Gemfile.lockとは
gemをインストールした後の記録のようなもの。
インストールしたgemの一覧とバージョンが記載されている。
bundle　install　をすると自動的に更新される。
gemはインストールした時期によってバージョンが変わってしまう可能性があるため、
本番環境と開発環境でインストールされるバージョンが異なるのを防ぐ役割がある。


Pry
デバッグ用。
コンソールでメソッドが使えるようになる。
binding.pryと入力した箇所で処理が止まる。
コンソールで入力して確認できる。
確認したあとはbinding.pryは消す。

